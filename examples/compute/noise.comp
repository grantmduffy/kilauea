#version 450

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) uniform Uniforms {
    mat4 camera;
    float time;
} uniforms;

layout (binding = 1, rgba8) uniform writeonly image2D resultImage;

// Permutation table for Perlin noise
const int p[512] = int[512](
    151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
    8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,
    35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,
    134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,
    55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,
    18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,
    250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,
    189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,
    172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,
    228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,
    107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,
    // Repeat the array to avoid wrapping
    151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
    8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,
    35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,
    134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,
    55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,
    18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,
    250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,
    189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,
    172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,
    228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,
    107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
);

// Fade function for smooth interpolation
float fade(float t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

// Linear interpolation
float lerp(float a, float b, float t) {
    return a + t * (b - a);
}

// Gradient function
float grad(int hash, float x, float y) {
    int h = hash & 15;
    float u = h < 8 ? x : y;
    float v = h < 4 ? y : h == 12 || h == 14 ? x : 0.0;
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

// 2D Perlin noise function
float perlin(float x, float y) {
    // Find unit grid cell containing point
    int X = int(floor(x)) & 255;
    int Y = int(floor(y)) & 255;
    
    // Get relative xy coordinates of point within that cell
    x -= floor(x);
    y -= floor(y);
    
    // Compute fade curves for each of x, y
    float u = fade(x);
    float v = fade(y);
    
    // Hash coordinates of the 4 grid corners
    int A = p[X] + Y;
    int AA = p[A];
    int AB = p[A + 1];
    int B = p[X + 1] + Y;
    int BA = p[B];
    int BB = p[B + 1];
    
    // Add blended results from 4 corners of grid
    return lerp(lerp(grad(p[AA], x, y),
                     grad(p[BA], x - 1.0, y), u),
                lerp(grad(p[AB], x, y - 1.0),
                     grad(p[BB], x - 1.0, y - 1.0), u), v);
}

// Fractal Brownian Motion (fBm) for more interesting noise
float fbm(vec2 pos, int octaves) {
    float value = 0.0;
    float amplitude = 0.5;
    float frequency = 1.0;
    
    for (int i = 0; i < octaves; i++) {
        value += amplitude * perlin(pos.x * frequency, pos.y * frequency);
        amplitude *= 0.5;
        frequency *= 2.0;
    }
    
    return value;
}

void main() {
    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    vec2 size = vec2(imageSize(resultImage));
    vec2 uv = vec2(storePos) / size;
    
    // Scale the coordinates for more interesting patterns
    vec2 pos = uv * 8.0;
    
    // Add time-based animation - slowly evolve the noise over time
    float timeScale = 0.3; // Slow evolution
    vec2 animatedPos = pos + vec2(uniforms.time * timeScale * 0.5, uniforms.time * timeScale * 0.3);
    
    // Generate fractal Brownian motion with 6 octaves using animated position
    float noise = fbm(animatedPos, 6);
    
    // Add a secondary layer of noise that moves in a different direction for more complexity
    vec2 animatedPos2 = pos + vec2(-uniforms.time * timeScale * 0.2, uniforms.time * timeScale * 0.4);
    float noise2 = fbm(animatedPos2 * 0.5, 4) * 0.5;
    
    // Combine the two noise layers
    noise = mix(noise, noise2, 0.3);
    
    // Normalize noise from [-1, 1] to [0, 1]
    noise = (noise + 1.0) * 0.5;
    
    // Create time-animated colors that slowly shift
    float colorShift = uniforms.time * 0.1;
    vec3 color1 = vec3(0.2 + 0.1 * sin(colorShift), 0.4 + 0.1 * cos(colorShift * 1.3), 0.8 + 0.1 * sin(colorShift * 0.7)); // Animated Blue
    vec3 color2 = vec3(0.8 + 0.1 * cos(colorShift * 0.8), 0.6 + 0.1 * sin(colorShift * 1.1), 0.2 + 0.1 * cos(colorShift * 1.5)); // Animated Orange
    vec3 color3 = vec3(0.2 + 0.1 * sin(colorShift * 1.2), 0.8 + 0.1 * cos(colorShift * 0.9), 0.4 + 0.1 * sin(colorShift * 1.4)); // Animated Green
    
    // Use noise to blend between colors
    vec3 finalColor;
    if (noise < 0.33) {
        finalColor = mix(color1, color2, noise * 3.0);
    } else if (noise < 0.66) {
        finalColor = mix(color2, color3, (noise - 0.33) * 3.0);
    } else {
        finalColor = mix(color3, color1, (noise - 0.66) * 3.0);
    }
    
    vec4 result = vec4(finalColor, 1.0);
    imageStore(resultImage, storePos, result);
}
